#!/usr/bin/env python
#
# Copyright (c) 2015 The New Mexico Consortium
#
# {{{NMC-LICENSE
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
# THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.
#
# }}}
#
# Get status of all chassis
#

import os
import sys
import getopt
import random

from nmc_probe.log import Log
from nmc_probe.nanek import Chassis
from diskless.db import NewNode
from diskless.db import NewInterface
from diskless.db import db


def main():
    """
    Program entry point
    """
    options = read_options()
    chassis_num = options['chassis']

    last_node = chassis_num * 14
    first_node = last_node - 13

    chassisParams = {'nodeNameFormat': 'na%04d',
                     'chassisNameFormat': 'na-mm%02d',
                     'host': '10.56.100.%d' % chassis_num,
                     'num': chassis_num,
                     'firstNode': first_node,
                     'lastNode': last_node}

    # Create a chassis object
    chassis = Chassis(chassisParams)
    mac_list = chassis.collectMac()

    iscsi_servers = ['na-jbod-01', 'na-jbod-02']

    for intf_num in range(1):
        intf = 'eth%d' % intf_num
        for (slot, mac) in mac_list[intf_num].iteritems():
            new_intf = NewInterface.from_mac(mac)

            if new_intf is not None:
                node_num = first_node + int(slot) - 1
                print node_num
                fourth_octet = node_num % 256
                print fourth_octet
                third_octet = 1 + int(node_num / 256)
                print third_octet
                node_id = chassisParams['nodeNameFormat'] % node_num
                new_intf.new_node.IP = '10.55.%d.%d' % \
                    (third_octet, fourth_octet)
                new_intf.new_node.node_id = node_id
                new_intf.new_node.type = 'nanek'
                new_intf.new_node.save()
                print new_intf.new_node

                iscsi_server = iscsi_servers[node_num % 2]
                initiator_name = iscsi_iname()

                db.add_node_attribute(node_id, 'iscsi_server', iscsi_server)
                db.add_node_attribute(node_id, 'initiator_name',
                                      initiator_name)


def iscsi_iname():
    prefix = 'iqn.2014-11.nmc-probe.org:'
    iname = [
        random.randint(0x00, 0xff),
        random.randint(0x00, 0xff),
        random.randint(0x00, 0xff),
        random.randint(0x00, 0xff),
        random.randint(0x00, 0xff),
        random.randint(0x00, 0xff)
        ]
    return prefix + ''.join(map(lambda x: "%02x" % x, iname))


def usage(prog_name):
    print ('Usage %s [options]')
    print ('Gather mac addresses for a chassis')
    print
    print (' --ch=N | -c N\tChassis from which MAC addresses will be gathered')
    print (' --debug=N | -d N\tSet the debug log level')
    print (' --help | -h\tPrint this usage message')


def read_options():
    prog_name = sys.argv[0]

    optlist = None
    args = None

    options = {}

    try:
        optlist, args = getopt.getopt(sys.argv[1:], 'c:s:d:h',
                                      ['debug=', 'cycle', 'state', 'on', 'off',
                                      'chassis=', 'slot=', 'help'])

    except getopt.GetoptError as err:
        print(err)
        usage(prog_name)
        sys.exit(0)

    num = None

    # Process the options
    for (opt, value) in optlist:
        if opt == '--chassis' or opt == '-c':
            options['chassis'] = int(value)

        if opt == '--help' or opt == '-h':
            usage(prog_name)
            sys.exit(0)

        if opt == '--debug' or opt == '-d':
            Log.debugLevel = int(value)

    if 'chassis' not in options:
        usage(prog_name)
        sys.exit(0)

    return options

# Program entry point
if __name__ == "__main__":
    main()
