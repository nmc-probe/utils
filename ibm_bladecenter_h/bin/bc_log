#!/usr/bin/python
#
# Copyright (c) 2015 The New Mexico Consortium
# 
# {{{NMC-LICENSE
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
# THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.
#
# }}}
#
# Print out blade center logs
#

import os, datetime, getopt, sys

from nmc_probe.couchdb import CouchDB
from nmc_probe.log import Log
from nmc_probe.nanek import Blade, Slot, Chassis, LogEntry
from nmc_probe.bladeutilsconfig import BladeUtilsConfig

def main():
    """
    Program entry point
    """
    options = readOptions()

    # Couch database connector
    couch = CouchDB.withConfigFile()

    dateRange = None

    # EventID, example message
    annoyingEvents = set(['0x0001600b', # All system messages deleted from event log by 'SNMP IPADDR'
                          '0x0001601b', # All audit messages deleted from event log by 'SNMP 10.56.254.253'.
                          '0x40000022', # User 'USERID' power cycled BLADE 01
                          '0x0000007a', # Remote login successful for user 'USERID' from Web at IP 10.0.42.148
                          '0x0001601a', # Remote logoff successful for user 'USERID' from Web at IP 10.0.42.148 
                          '0x00015902', # User 'USERID' powered off blade 04.
                          '0x00015903', # User 'USERID' powered on blade 03.
                          '0x00015904', # No power permission to the blade. Power command was not sent to blade 03
                          '0x00015906', # User 'SNMP 10.56.254.253' restarted blade NN'
                          '0x10000002', # POSTBIOS:   00180700 10000050 Planar PCI device does not respond or disabled by user
                                        # POSTBIOS:   00180700 10000050 Planar PCI device does not respond or disabled by user
                          '0x1c000002', # Blade powered on
                          '0x1c000001', # Blade powered off
                          '0x00200000', # Remote login failed for user 'USERID' from SSH at IP 10.0.42.152
                      ])

    startDate   = options.get('start', None)
    endDate      = options.get('end', None)
    chassis      = options.get('chassis', None)
    noblade      = options.get('noblade', None)
    noslot       = options.get('noslot', None)
    all          = options.get('all', None)
    slot         = options.get('slot', None)
    blade        = options.get('blade', None)
    skipAnnoying = options.get('skipAnnoying', None)
    params       = {}

    start = None
    end = None

    if startDate is not None:
        if chassis is not None:
            start = [chassis, startDate]
        else:
            start = [[], startDate]

    if endDate is not None:
        if chassis is not None:
            end = [chassis, endDate]
        else:
            end = [[], endDate]

        params['end'] = end

    if chassis is not None and startDate is None and endDate is None:
        start = [chassis]
        end = [chassis, []]

    if start is not None:
        params['start'] = start

    if end is not None:
        params['end'] = end

    # Hack until params for complex searches can be handled correctly
    params = None

    # Get all log entries that are not info
    logEntries = []

    if all:
        logEntries = LogEntry.all(couch, dateRange)
    else:
        logEntries = LogEntry.allNotInfo(couch, params)

    for entry in logEntries:
        timestamp    = prettyDate(entry[0])
        message      = entry[1].get(u'message',      'no message')
        chassisDocId = entry[1].get(u'chassisDocId', 'unknown')
        slotDocId    = entry[1].get(u'slotDocId',    'none')
        bladeDocId   = entry[1].get(u'bladeDocId',   'none')
        severity     = entry[1].get(u'severity',     'unknown')
        event        = entry[1].get(u'eventID',      'eventID')

        displayEntry = 1

        if message == 'Event log full':
            displayEntry = None
            
        if chassis and chassis != chassisDocId:
            displayEntry = None

        if noblade and bladeDocId != 'none':
            displayEntry = None

        if noslot and slotDocId != 'none':
            displayEntry = None

        if slot and slot != slotDocId:
            displayEntry = None

        if blade and blade != bladeDocId:
            displayEntry = None

        if skipAnnoying and event in annoyingEvents:
            displayEntry = None

        if displayEntry:
            print '%s severity:%s chassis:%s slot:%s blade:%s eventID:%s message:%s' % (timestamp, severity, chassisDocId, slotDocId, bladeDocId, event, message)

def prettyDate(timestamp):
    """
    Convert a JSON date into a pretty date
    """
    try:
        return datetime.datetime.strptime(timestamp, '%Y-%m-%dT%H:%M:%S')
    except:
        pass

    return timestamp

def usage(progName):
    """
    Display program usage
    """
    print ('Usage: %s [options]' % progName)
    print
    print ('  --start=YYYY-MM-DD\tstart date')
    print ('  --end=YYYY-MM-DD\tend date')
    print ('  --ch=num\t\tLimits results to a specific chassis')
    print ('  --slot=num\t\tLimits results to a specific chassis. Requires --ch option')
    print ('  --noblade\t\tDo not display entries that are related to a blade')
    print ('  --noslot\t\tDo not display entries that are related to a slot')
    print ('  --chassisonly\t\tSame as --noblade and --noslot')
    print ('  --blade=blade id\t\tOnly display entries for the specified blade')
    print ('  --skip-annoying\t\tDo not display annoying log entries')
    print ('  --all|-a\t\tDisplay all log entries, including WARN, ERR and INFO')

def readOptions():
    progName = sys.argv[0]
    config = BladeUtilsConfig()

    optlist = None
    args = None

    options = {}

    try:
        optlist, args = getopt.getopt(sys.argv[1:], 'ad:h', ['ch=', 'chassis=', 'debug=', 'start=', 'end=', 'help', 'noblade', 'noslot', 'chassisonly', 'all', 'slot=', 'blade=',
                                                             'skip-annoying'])

    except getopt.GetoptError as err:
        print(err)
        usage(progName)
        sys.exit(0)

    # Process the options
    for (opt,value) in optlist:
        if opt == '--help' or opt == '-h':
            usage(progName)
            sys.exit(0)

        if opt == '--ch' or opt == '--chassis':
            options['chassis'] = int(value)

        if opt == '--slot':
            options['slot'] = int(value)

        if opt == '--blade':
            options['blade'] = value

        if opt == '--start':
            options['start'] = datetime.datetime.strptime(value, '%Y-%m-%d').isoformat()

        if opt == '--end':
            options['end'] = datetime.datetime.strptime(value, '%Y-%m-%d').isoformat()

        if opt == '--noslot':
            options['noslot'] = 1

        if opt == '--noblade':
            options['noblade'] = 1

        if opt == '--skip-annoying':
            options['skipAnnoying'] = 1

        if opt == '--chassisonly':
            options['noblade'] = 1
            options['noslot'] = 1

        if opt == '--debug' or opt == '-d':
            Log.debugLevel = int(value)

        if opt == '--all' or opt == '-a':
            options['all'] = 1

    # Handle slot option BEFORE the chassis option
    if options.has_key('slot'):
        if not options.has_key('chassis'):
            print ('--slot option requires --ch option\n')
            usage(progName)
            sys.exit(1)
        else:
            slotDocId = config.options['chassis']['slot_docid_format'] % (options['chassis'] , options['slot'])
            options['slot'] = slotDocId
            Log.debug(100, slotDocId)

    # Handle chassis option after slot option
    if options.has_key('chassis'):
        chassisDocId = config.options['chassis']['chassis_docid_format'] % options['chassis']
        options['chassis'] = chassisDocId
        Log.debug(100, chassisDocId)

    return options

# Program entry point
if __name__ == "__main__":
    main()
