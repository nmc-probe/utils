#!/usr/bin/python
#
# Copyright (c) 2015 The New Mexico Consortium
# 
# {{{NMC-LICENSE
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
# THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.
#
# }}}
#
# Get status of all chassis
#

import os,sys,getopt

from nmc_probe.couchdb import CouchDB
from nmc_probe.log import Log
from nmc_probe.nanek import Chassis

def main():
    """
    Program entry point
    """
    options    = readOptions()
    chassisNum = options['chassis']

    lastNode = chassisNum * 14
    firstNode = lastNode - 13

    chassisParams = {'nodeNameFormat': 'na%04d',
                     'chassisNameFormat': 'na-mm-%02d',
                     'host': '10.56.100.%d' % chassisNum, 
                     'num': chassisNum,
                     'firstNode': firstNode,
                     'lastNode': lastNode}

    # Create a chassis object
    chassis = Chassis(chassisParams)
    mac = chassis.collectMac()
    print mac


def usage(progName):
    print ('Usage %s [options]')
    print ('Gather mac addresses for a chassis')
    print 
    print (' --ch=N | -c N\tChassis from which MAC addresses will be gathered')
    print (' --debug=N | -d N\tSet the debug log level')
    print (' --help | -h\tPrint this usage message')
    
def readOptions():
    progName = sys.argv[0]

    optlist = None
    args = None

    options = {}

    try:
        optlist, args = getopt.getopt(sys.argv[1:], 'c:s:d:h', ['debug=', 'cycle', 'state', 'on', 'off', 'chassis=', 'slot=', 'help'])

    except getopt.GetoptError as err:
        print(err)
        usage(progName)
        sys.exit(0)

    num=None

    # Process the options
    for (opt,value) in optlist:
        if opt == '--chassis' or opt == '-c':
            options['chassis'] = int(value)

        if opt == '--help' or opt == '-h':
            usage(progName)
            sys.exit(0)

        if opt == '--debug' or opt == '-d':
            Log.debugLevel = int(value)

    if not options.has_key('chassis'):
        usage(progName)
        sys.exit(0)

    return options

# Program entry point
if __name__ == "__main__":
    main()
