#!/usr/bin/python
#
# Copyright (c) 2015 The New Mexico Consortium
# 
# {{{NMC-LICENSE
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
# THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.
#
# }}}
#
# Get all documents with type == log_entry and output the JSON
# to stdout

import nmc,os,getopt,sys,pprint

from nmc.log import Log
from nmc.couchdb import CouchDB
from nmc.nanek import LogEntry
from nmc.bladeutilsconfig import BladeUtilsConfig

def main():
    """
    Program entry point
    """
    options = readOptions()

    # Couch database connector
    couch = CouchDB.withConfigFile()

    # Get the view
    tuples = couch.getViewTuple(options['design'], options['view'])

    # Set up the pretty printer, just in case
    pp = pprint.PrettyPrinter(indent=4)

    for tuple in tuples:
        key = tuple[0]
        value = tuple[1]
        rev = tuple[1].get(u'_rev', None)

        if options.has_key('delete'):
            if rev:
                Log.info('Deleting "%s" "%s"' % (key, rev))
                couch.delete(value)
        else:
            if options.has_key('pretty'):
                if options.has_key('id_and_rev'):
                    print '%s %s' % (tuple[0],rev)
                else:
                    pp.pprint(tuple)
            else:
                print tuple

        
def usage(progName):
    print ('%s: Display key/value entries for a view in the couch db defined in %s' % (progName, BladeUtilsConfig.defaultConfigFile()))
    print 
    print ('  --design       design_document')
    print ('  --view         view')
    print ('  --pretty       Format that output nicely')
    print ('  --id_and_rev   Only display the document id and revision tuples')
    print ('  --delete       Delete all documents in this view')
    print 
    print ('Examples:')
    print 
    print ('%s --design=blade --view=all --id_and_rev' % progName)
    print ('   Returns all documents in blade/all, and prints the document id and revision tuples')

    
def readOptions():
    progName = sys.argv[0]

    optlist = None
    args = None

    options = {}
    try:
        optlist, args = getopt.getopt(sys.argv[1:], 'hd:', ['help', 'debug=', 'design=', 'view=', 'pretty', 'id_and_rev', 'delete'])

    except getopt.GetoptError as err:
        print(err)
        usage(progName)
    	sys.exit(0)

    num=None

    # Process the options
    for (opt,value) in optlist:
        if opt == '--help' or opt == '-h':
            usage(progName)
            sys.exit(0)
	    
	if opt == '--debug' or opt == '-d':
	   Log.debugLevel = int(value)

        if opt == '--design':
            options['design'] = value

        if opt == '--view':
            options['view'] = value

        if opt == '--pretty':
            options['pretty'] = 1

        if opt == '--delete':
            options['delete'] = 1

    failed = None

    if not options.has_key('design'):
        failed = 1
        print ('--design parameter required')

    if not options.has_key('view'):
        failed = 1
        print ('--view parameter required')

    if failed:
        usage(progName)
        sys.exit(1)

    return options

# Program entry point
if __name__ == "__main__":
    main()
