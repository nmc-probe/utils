# Copyright (c) 2015 The New Mexico Consortium
# 
# {{{NMC-LICENSE
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
# THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.
#
# }}}

from nmc_probe.log import Log

proc_diskstats_fn = '/proc/diskstats'

class Diskstats:
    '''Gets the information from /proc/diskstats and presents the
    information as a dictionary, mapping the device name to 
    the attributes
    { device_name: {
        'major_number': integer
        'minor_number': integer
        'device_name':  string
        'reads_completed_successfully': integer,
        'reads_merged': integer,
        'sectors_read': integer
        'time_reading_ms': integer, in milliseconds,
        'writes_completed': integer
        'writes_merged': integer,
        'sectors_written': integer
        'time_writing_ms': integer, milliseconds,
        'io_in_progress': integer, count
        'time_doing_io_ms': integer, milliseconds
        'weighted_time_doing_is_ms': integer, milliseconds,
       }'''

    @classmethod
    def info(cls):
        '''Gather /proc/diskstats info, return the hash'''
        fh = open(proc_diskstats_fn, 'r')
        
        diskstats = {}

        for stats in fh:
            parts = stats.split()

            diskstats[parts[2]] = {
                'major_number': int(parts[0]),
                'minor_number': int(parts[1]),
                'device_name':  parts[2],
                'reads_completed_successfully': int(parts[3]),
                'reads_merged': int(parts[4]),
                'sectors_read': int(parts[5]),
                'time_reading_ms': int(parts[6]),
                'writes_completed': int(parts[7]),
                'writes_merged': int(parts[8]),
                'sectors_written': int(parts[9]),
                'time_writing_ms': int(parts[10]),
                'io_in_progress': int(parts[11]),
                'time_doing_io_ms': int(parts[12]),
                'weighted_time_doing_is_ms': int(parts[13]),
            }

        return diskstats
