# Copyright (c) 2015 The New Mexico Consortium
# 
# {{{NMC-LICENSE
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
# THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.
#
# }}}

from nmc_probe.command import AsyncCommand, Command
from nmc_probe.log import Log

hdparm_cmd='/usr/sbin/hdparm'

class HDParm:
    def __init__(self, dev):
        self.dev = dev

    @property
    def info(self):
        '''Dictionary of disk information, like model number'''
        if getattr(self, '_info', None) is None:
            self._info = self.get_info()
        return self._info

    def get_info(self):
        hdparm_attrs = {
            '^\s*Serial Number:\s*(.*)\s*$': 'serial_number',
            '^\s*Firmware Revision:\s*(.*)\s*$': 'firmware',
            '^\s*Transport:\s*(.*)\s*$':     'transport',
            '^\s*NAA:\s*(.*)\s*$':           'naa',
            '^\s*IEEE OUI:\s*(.*)\s*$':      'ieee_oui',
            '^\s*Unique ID:\s*(.*)\s*$':     'unique_id',
            '^\s*Logical Unit WWN Device Identifier:\s*(.*)\s*$': 'wwn',
            '^\s*Model Number:\s+(.*)\s*$':  'model_number',
            '^\s*CHS current addressable sectors\s*:\s*(\d+)': 'chs_current_addressable_sectors',
            '^\s*LBA\s+user\s+addressable\s+sectors\s*:\s*(\d+)': 'lba_user_addressable_sectors',
            '^\s*LBA48  user addressable sectors:\s*(\d+)': 'lba48_user_addressable_sectors',
            '^\s*Logical/Physical Sector size:\s*(\d+)': 'sector_size_bytes',
            '^\s*device size with M = 1024\*1024:\s*(\d+)': 'size_mb',
}

        cmd = [hdparm_cmd, '-I', self.dev]

        attrs = Command.run_and_extract_attrs(cmd, hdparm_attrs)

        for (key, value) in attrs.iteritems():
            attrs[key] = value.strip()

        # Convert integer values to integers
        int_attrs = ['size_mb', 'sector_size_bytes', 'lba48_user_addressable_sectors', 'chs_current_addressable_sectors']

        for attr in int_attrs:
            value = attrs.get(attr, None)
            if value is not None:
                attrs[attr] = int(value)

        return attrs

    def speed_test(self, offset=None):
        cmd = [hdparm_cmd, '-t', '--direct']

        if offset:
            cmd.append('--offset')
            cmd.append('%d' % offset)

        cmd.append(self.dev)
        
        patterns = {
            '^\s*Timing.*=\s*([0-9\.]+)': 'speed'
        }

        attrs = Command.run_and_extract_attrs(cmd, patterns)

        float_attrs = ['speed']

        for attr in float_attrs:
            value = attrs.get(attr, None)
            if value is not None:
                attrs[attr] = float(value)

        return attrs['speed']


    @property
    def speed(self):
        if getattr(self, '_speed', None) is None:
            self._speed = self.get_speed()
        return self._speed

    def get_speed(self, num_samples = 3):
        ten_percent_gb = self.info['size_mb'] / 10240

        positions = {
            'front': ten_percent_gb,
            'middle': self.info['size_mb'] / 1024 / 2,
            'end': (self.info['size_mb'] / 1024) - ten_percent_gb
        }

        speed = {
            'front': 0.0,
            'middle': 0.0,
            'end': 0.0
        }

        for (name, position) in positions.iteritems():
            for i in xrange(num_samples):
                speed[name] = speed[name] + self.speed_test(position)

            speed[name] = speed[name] / num_samples

        # Average the speed for all positions tested
        sum_speed = 0
        num_categories = 0

        for key, value in speed.iteritems():
            sum_speed = sum_speed + value
            num_categories = num_categories + 1

        speed['average'] = float(sum_speed) / float(num_categories)

        return speed
