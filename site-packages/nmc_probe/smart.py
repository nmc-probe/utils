# Copyright (c) 2015 The New Mexico Consortium
# 
# {{{NMC-LICENSE
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
# THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.
#
# }}}

from nmc_probe.command import AsyncCommand, Command
from nmc_probe.log import Log
import os

smartctl_cmd='/usr/sbin/smartctl'

class Smart:
    '''Get SMART info for a disk'''
    def __init__(self, dev):
        '''Constructor

        Params:
        -------
        dev: string
             Path to the device
        '''
        self.dev = dev

    @property
    def passed(self):
        test = self.info.get('test', None)

        if test is not None:
            return self.info['test'] == 'PASSED'

        return test

    @property
    def info(self):
        '''returns: hash of info returned from SMART data'''
        if getattr(self, '_info', None) is None:
            self._info = self.get_info()
        return self._info

    def get_info(self):
        smart_attrs = {
            '^\s*Model Family:\s+(.*)': 'model_family',
            '^\s*Device Model:\s+(.*)': 'device_model',
            '^\s*Serial Number:\s+(.*)': 'serial_number',
            '^\s*LU WWN Device Id:\s+(.*)': 'wwn',
            '^\s*Firmware Version:\s+(.*)': 'firmware_version',
            '^\s*User Capacity:\s+(.*)': 'user_capacity',
            '^\s*Sector Size:\s+(.*)': 'sector_size_b',
            '^\s*Device is:\s+(.*)': 'device_is',
            '^\s*ATA Version is:\s+(.*)': 'ata_version',
            '^\s*SATA Version is:\s+(.*)': 'sata_version',
            '^\s*Local Time is:\s+(.*)': 'local_time',
            '^\s*SMART support is: Available - device has SMART capability.\s*$': 'available',
            '^\s*SMART support is:\s+(.*)': 'smart_enabled',
            '^\s*SMART overall-health self-assessment test result:\s+(.*)': 'test',
        }

        cmd = [smartctl_cmd, '-a', self.dev]

        attrs = Command.run_and_extract_attrs(cmd, smart_attrs)

#        for (key, value) in attrs.iteritems():
#            if callable(value.strip):
#                attrs[key] = value.strip()

        return attrs

    def start_test(self, short = 1):
        '''Start a test of the drive
        
        Params:
        -------
        short: int
           1 = run short test, 0 = run long test. Short is the default
        '''
        test = '--test=short'
        if short != 1:
            test = '--test=long'
            
            
        cmd = [smartctl_cmd, test, self.dev]
        Command.run(cmd)



