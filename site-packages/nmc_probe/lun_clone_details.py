# Copyright (c) 2015 The New Mexico Consortium
# 
# {{{NMC-LICENSE
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
# THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.
#
# }}}

# nmc_probe imports
from nmc_probe.target_manager import TargetManager
from nmc_probe.zfs import ZFS
from nmc_probe.log import Log

# other imports
from sqlalchemy_utils import JSONType, ChoiceType, Timestamp
from flask_sqlalchemy import SQLAlchemy
import uuid

db = SQLAlchemy()

class LUNCloneDetails(db.Model, Timestamp):
    status_types = [('pending',     'pending'),
                    ('in_progress', 'in_progress'),
                    ('complete',    'complete'),
                    ('failed',      'failed')]

    job_types = [('create', 'create'),
                 ('delete', 'delete')]

    __tablename__ = 'lun_clone_details'
    id = db.Column(db.String(20), primary_key=True)
    details = db.Column(JSONType)
    status = db.Column(ChoiceType(status_types))
    job_type = db.Column(ChoiceType(job_types))
    num_clones = db.Column(db.Integer, default = 0)
    num_complete = db.Column(db.Integer, default = 0)
    percent_complete = db.Column(db.Float, default = 0)
    error = db.Column(db.Unicode(2048))

    @classmethod
    def get_status(cls, id):
        return db.session.query(cls).filter(cls.id == id)

    @classmethod
    def with_args(cls, args, job_type_name):
        guid = '%s' % uuid.uuid4()
        details = cls(id = guid,
                      details = args,
                      status = u'pending',
                      job_type = job_type_name,
                      num_clones = len(args['clones']),
                      num_complete = 0,
                      percent_complete = 0)
        db.session.add(details)
        db.session.commit()
        return details

    @classmethod
    def get_next(cls):
        return db.session.query(cls).filter(cls.status == pending).order_by(create)
